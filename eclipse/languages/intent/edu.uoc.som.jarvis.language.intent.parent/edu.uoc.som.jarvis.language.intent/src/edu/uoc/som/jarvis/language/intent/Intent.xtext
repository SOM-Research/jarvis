// automatically generated by Xtext
grammar edu.uoc.som.jarvis.language.intent.Intent with org.eclipse.xtext.common.Terminals

import "edu.uoc.som.jarvis.intent" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Library returns Library:
	{Library}
	'Library' name=EString
	(customEntities+=CustomEntityDefinition)*
	(eventDefinitions+=(EventDefinition|IntentDefinition))*
;

CustomEntityDefinition:
	MappingEntityDefinition
;

MappingEntityDefinition returns MappingEntityDefinition:
	'mapping' name=ID '{'
	(entries+=MappingEntityDefinitionEntry)+
	'}'
;

MappingEntityDefinitionEntry returns MappingEntityDefinitionEntry:
	'value'referenceValue=EString ('synonyms:'(synonyms+=EString)+)?
;

EventDefinition returns EventDefinition:
	{EventDefinition}
	'event' name=EString
	(outContexts+=OutContextDefinition)?
;

IntentDefinition returns IntentDefinition:
	{IntentDefinition}
	'intent' name=EString ('follows' follows=[IntentDefinition|ID])?
	'{'
		'inputs' '{'
			trainingSentences+=EString (trainingSentences+=EString)*
		'}'
		(inContexts+=InContextDefinition)*
		(outContexts+=OutContextDefinition)*
	'}'
	;

InContextDefinition returns Context:
	{Context}
	'inContext' name=EString ('(' 'lifeSpan' '='lifeSpan=INT ')')?
;
	
OutContextDefinition returns Context:
	{Context}
	'outContext' name=EString ('(' 'lifeSpan' '=' lifeSpan=INT ')')?
	('{'
		'params' '{'
			(parameters+=ContextParameter)+
		'}'
	'}')?
;

ContextParameter returns ContextParameter:
	{ContextParameter}
	name=EString ('<-' textFragment=EString '('entity=EntityDefinitionReference')')?
;

EntityDefinitionReference returns EntityDefinitionReference:
	(BaseEntityDefinitionReference | CustomEntityDefinitionReference)	
;

BaseEntityDefinitionReference returns BaseEntityDefinitionReference:
	{BaseEntityDefinitionReference}
	'@' baseEntity=BaseEntityDefinition
;

CustomEntityDefinitionReference returns CustomEntityDefinitionReference:
	{CustomEntityDefinitionReference}
	'@' customEntity=[CustomEntityDefinition]
	
;

BaseEntityDefinition returns BaseEntityDefinition:
	{BaseEntityDefinition}
	entityType=EntityType
;

enum EntityType returns EntityType:
	ANY = 'any' | CITY = 'city'
;

EString returns ecore::EString:
	STRING | ID('->'ID)*;
