// automatically generated by Xtext
grammar fr.zelus.jarvis.language.execution.Execution with org.eclipse.xtext.common.Terminals

import "fr.zelus.jarvis.execution" 
import "fr.zelus.jarvis.intent" as intent
import "fr.zelus.jarvis.platform" as platform
import "http://www.eclipse.org/emf/2002/Ecore" as ecore




ExecutionModel returns ExecutionModel:
	{ExecutionModel}
	(imports+=ImportDeclaration (imports+=ImportDeclaration)*)?
	('use' 'provider'eventProviderDefinitions+=[platform::EventProviderDefinition|ID])*
	(executionRules+=ExecutionRule
	(executionRules+=ExecutionRule)*)?
;

ImportDeclaration returns ImportDeclaration:
	{PlatformImportDeclaration} 'import platform' path=STRING ('as' alias=ID)? |
	{LibraryImportDeclaration} 'import library' path=STRING ('as' alias=ID)?
;


ExecutionRule returns ExecutionRule:
	{ExecutionRule}
		'on intent' event=[intent::EventDefinition|ID] 'do'
		('var' variables+=VariableDefinition (',' variables+=VariableDefinition)*)?
		actions+=ActionInstance (actions+=ActionInstance)*
	;
	
VariableDefinition returns Variable: 
	{Variable}
		name=ID
;
	
ActionInstance returns ActionInstance:
	((returnVariable=VariableAccess) '=')?
	action=[platform::ActionDefinition|QualifiedName]
	('(' values+=ParameterValue (',' values+=ParameterValue)* ')')?
	('on error do' '{' (onError+=ActionInstance)+ '}')?
	
;

ParameterValue returns ParameterValue:
	{ParameterValue}
	parameter=[platform::Parameter|ID] ':' expression=Expression
;

Expression returns Expression:
	VariableAccess | Literal
;


VariableAccess returns VariableAccess:
	{VariableAccess}
	referredVariable=[Variable|ID]
;

Literal returns Literal:
	StringLiteral
;

StringLiteral returns StringLiteral:
	{StringLiteral}
	value=STRING
;

QualifiedName returns ecore::EString:
ID ('.'ID)*;

IntentDefinition returns intent::IntentDefinition:
	{intent::IntentDefinition}
;
