@Ecore(nsURI="fr.zelus.jarvis.intent")
@GenModel(modelDirectory="/intent/src/main/java-gen", importerID="org.eclipse.emf.importer.ecore", complianceLevel="8.0")
package fr.zelus.jarvis.intent

class EventDefinition {
    String name
    contains Context[] outContexts
    op Context getOutContext(String contextName) {
        for(Context context : getOutContexts()) {
            // not case-sensitive comparison should be put in the documentation
            if(context.getName().toLowerCase().equals(contextName.toLowerCase())) {
                return context;
            }
        }
        return null;
    }
}

class IntentDefinition extends EventDefinition {
    refers IntentDefinition follows opposite followedBy
    refers IntentDefinition[] followedBy opposite follows
    contains Context[] inContexts
    String[] trainingSentences
}

class Context {
    String name
    int lifeSpan = "5"
    contains ContextParameter[] parameters
    op ContextParameter getContextParameter(String parameterName) {
        for(ContextParameter contextParameter : getParameters()) {
            if(contextParameter.getName().equals(parameterName)) {
                return contextParameter;
            }
        }
        return null;
    }
}

class ContextParameter {
    String name
    String textFragment
    contains EntityDefinition entity
}

class EventInstance {
    refers EventDefinition definition
    contains ContextInstance[] outContextInstances
    op ContextInstance getOutContextInstance(String contextInstanceName) {
        for(ContextInstance contextInstance : getOutContextInstances()) {
            if(contextInstance.getDefinition().getName().equals(contextInstanceName)) {
                return contextInstance;
            }
        }
        return null;
    }
}

class RecognizedIntent extends EventInstance {

}

class ContextInstance {
    refers Context definition
    int lifespanCount
    contains ContextParameterValue[] values opposite contextInstance
}

class ContextParameterValue {
    container ContextInstance contextInstance opposite values
    refers ContextParameter contextParameter
    String value
}

abstract class EntityDefinition {

}

class BaseEntityDefinition extends EntityDefinition {
    EntityType entityType
}

// class EntityDefinitionLink extends EntityDefinition {
//   refers EntityDefinition referredEntityDefinition -> for CompositeEntityDefinitions created in modules
// }

// class CompositeEntityDefinition extends EntityDefinition

enum EntityType {
    ANY as "any" = 0
    CITY as "city" = 1
}


